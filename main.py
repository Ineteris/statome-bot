from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from datetime import time
import asyncio
import logging
import os

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤ –∏ ID –∫–∞–Ω–∞–ª–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.environ.get("BOT_TOKEN")
CHANNEL_ID = os.environ.get("CHANNEL_ID")

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
message_log = {}  # {chat_id: [message_id, ...]}

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    lang = update.effective_user.language_code
    message = "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ –≤–∏–¥–µ–æ, —Ñ–æ—Ç–æ –∏–ª–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á—ë—Ç –ø–æ —Ä–∞–±–æ—Ç–µ." \
        if lang != 'es' else "Hola, env√≠ame tu video, foto o informe escrito de trabajo."
    sent = await update.message.reply_text(message)
    await store_message(update.effective_chat.id, sent.message_id)

# –•–µ–ª–ø–µ—Ä: —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å message_id
async def store_message(chat_id: int, message_id: int):
    message_log.setdefault(chat_id, []).append(message_id)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ –∏ –≤–∏–¥–µ–æ-—Ñ–∞–π–ª–æ–≤
async def handle_video(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    video = update.message.video or update.message.document
    username = user.username or "–Ω–µ—Ç username"
    caption = f"–û—Ç—á—ë—Ç –æ—Ç {user.full_name} (@{username})"

    await context.bot.send_video(
        chat_id=CHANNEL_ID,
        video=video.file_id,
        caption=caption
    )
    reply = "–û—Ç—á—ë—Ç –ø–æ–ª—É—á–µ–Ω. –°–ø–∞—Å–∏–±–æ!" if user.language_code != 'es' else "Informe recibido. ¬°Gracias!"
    sent = await update.message.reply_text(reply)
    await store_message(update.effective_chat.id, update.message.message_id)
    await store_message(update.effective_chat.id, sent.message_id)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞
async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    username = user.username or "–Ω–µ—Ç username"
    text = update.message.text
    message = f"–¢–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á—ë—Ç –æ—Ç {user.full_name} (@{username}):\n{text}"

    await context.bot.send_message(chat_id=CHANNEL_ID, text=message)
    reply = "–¢–µ–∫—Å—Ç –ø–æ–ª—É—á–µ–Ω. –°–ø–∞—Å–∏–±–æ!" if user.language_code != 'es' else "Texto recibido. ¬°Gracias!"
    sent = await update.message.reply_text(reply)
    await store_message(update.effective_chat.id, update.message.message_id)
    await store_message(update.effective_chat.id, sent.message_id)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é
async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    photo = update.message.photo[-1]  # —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ
    username = user.username or "–Ω–µ—Ç username"
    user_caption = update.message.caption or ""

    caption = f"–§–æ—Ç–æ–æ—Ç—á—ë—Ç –æ—Ç {user.full_name} (@{username})"
    if user_caption:
        caption += f"\n\n{user_caption}"

    await context.bot.send_photo(
        chat_id=CHANNEL_ID,
        photo=photo.file_id,
        caption=caption
    )
    reply = "–§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ. –°–ø–∞—Å–∏–±–æ!" if user.language_code != 'es' else "Foto recibida. ¬°Gracias!"
    sent = await update.message.reply_text(reply)
    await store_message(update.effective_chat.id, update.message.message_id)
    await store_message(update.effective_chat.id, sent.message_id)

# –ó–∞–¥–∞—á–∞ –Ω–∞ –æ—á–∏—Å—Ç–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π
async def cleanup_messages(context: ContextTypes.DEFAULT_TYPE):
    logging.info("üßπ –ó–∞–ø—É—Å–∫ –æ—á–∏—Å—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π")
    for chat_id, message_ids in message_log.items():
        for msg_id in message_ids:
            try:
                await context.bot.delete_message(chat_id=chat_id, message_id=msg_id)
            except Exception as e:
                logging.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {msg_id} –≤ —á–∞—Ç–µ {chat_id}: {e}")
    message_log.clear()

# –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = ApplicationBuilder().token(BOT_TOKEN).build()

app.add_handler(CommandHandler("start", start))
app.add_handler(MessageHandler(filters.VIDEO | filters.Document.VIDEO, handle_video))
app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
app.add_handler(MessageHandler(filters.PHOTO, handle_photo))

# –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–∞ 00:00 UTC
scheduler = AsyncIOScheduler()
scheduler.add_job(cleanup_messages, trigger='cron', hour=0, minute=0, args=[app])

async def on_startup(app):
    scheduler.start()
    logging.info("üïõ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á –∑–∞–ø—É—â–µ–Ω.")

app.post_init = on_startup
app.run_polling()
