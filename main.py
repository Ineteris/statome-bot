from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from datetime import datetime
from telegram.constants import ParseMode
from fastapi import FastAPI, Request
from telegram.helpers import escape_markdown
import logging
import asyncio
import os

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.environ.get("BOT_TOKEN")
CHANNEL_ID = os.environ.get("CHANNEL_ID")     # STATOME | ADMINISTRACION | PARTES
GROUP_ID = os.environ.get("GROUP_ID")         # STATOME | PARTES DE TRABAJO | BOT
WEBHOOK_URL = os.environ.get("WEBHOOK_URL")

# –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ (username -> –§–ò–û)
USER_MAP = {
    "@CarlosPastorSempere": "00001-PASTOR SEMPERE, CARLOS",
    "@DanAkcerman": "00003-MONIN, DANILL",
    "@Oleg_dokukin": "00004-DOKUKIN, OLEH",
    "@OlegDokukin": "00004-DOKUKIN, OLEH",
    "@ViktorTiko": "A00008-VIKTOR TIKHONYCHEV"
}

# –•—Ä–∞–Ω–∏–ª–∏—â–∞ –æ—Ç—á—ë—Ç–æ–≤
last_message_ids = {}      # user_id -> message_id
report_users_today = {}    # user_id -> (–∏–º—è, –≤—Ä–µ–º—è)

# Telegram + FastAPI
app_fastapi = FastAPI()
telegram_app = ApplicationBuilder().token(BOT_TOKEN).build()

# –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_chat.type != 'private':
        return
    lang = update.effective_user.language_code or "ru"
    message = (
        "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ –≤–∏–¥–µ–æ, —Ñ–æ—Ç–æ –∏–ª–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á—ë—Ç –ø–æ —Ä–∞–±–æ—Ç–µ.\n–ö–æ–º–∞–Ω–¥—ã:\n‚Ä¢ /last ‚Äî –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç—á—ë—Ç"
        if lang != 'es' else
        "Hola, env√≠ame tu video, foto o informe escrito de trabajo.\nComandos:\n‚Ä¢ /last ‚Äî √∫ltimo informe"
    )
    await update.message.reply_text(message)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç—á—ë—Ç–æ–≤
async def handle_media(update: Update, context: ContextTypes.DEFAULT_TYPE, media_type: str):
    user = update.effective_user
    username = f"@{user.username}" if user.username else ""
    full_name = user.full_name
    custom_name = USER_MAP.get(username, full_name)

    # –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
    safe_name = escape_markdown(custom_name, version=2)
    safe_user = escape_markdown(username, version=2)
    caption_text = update.message.caption or update.message.text or ""
    safe_caption = escape_markdown(caption_text, version=2)

    caption = f"*{safe_name}* \\({safe_user}\\)\n{safe_caption}"

    sent = None
    try:
        if media_type == "video":
            video = update.message.video or update.message.document
            sent = await context.bot.send_video(chat_id=CHANNEL_ID, video=video.file_id, caption=caption, parse_mode=ParseMode.MARKDOWN_V2)

        elif media_type == "photo":
            photo = update.message.photo[-1]
            sent = await context.bot.send_photo(chat_id=CHANNEL_ID, photo=photo.file_id, caption=caption, parse_mode=ParseMode.MARKDOWN_V2)

        elif media_type == "text":
            sent = await context.bot.send_message(chat_id=CHANNEL_ID, text=caption, parse_mode=ParseMode.MARKDOWN_V2)

        if sent:
            user_id = user.id
            last_message_ids[user_id] = sent.message_id
            now = datetime.now()
            report_users_today[user_id] = (custom_name, now.strftime("%H:%M"))
            await update.message.reply_text("‚úÖ –û—Ç—á—ë—Ç –ø–æ–ª—É—á–µ–Ω. –°–ø–∞—Å–∏–±–æ!")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç—á—ë—Ç–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
async def handle_video(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await handle_media(update, context, "video")

async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await handle_media(update, context, "photo")

async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await handle_media(update, context, "text")

# –ö–æ–º–∞–Ω–¥–∞ /last
async def last_report(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    msg_id = last_message_ids.get(user_id)

    if not msg_id:
        await update.message.reply_text("‚ùå –í–∞—à –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç—á—ë—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    try:
        await context.bot.copy_message(chat_id=user_id, from_chat_id=CHANNEL_ID, message_id=msg_id)
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ—Å–ª–∞—Ç—å –æ—Ç—á—ë—Ç: {e}")
        await update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç—á—ë—Ç.")

# –û—á–∏—Å—Ç–∫–∞ —á–∞—Ç–∞ –≤ 00:00
async def daily_clear_chat(context: ContextTypes.DEFAULT_TYPE):
    logger.info("üßπ –ó–∞–ø—É—Å–∫ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≥—Ä—É–ø–ø—ã")
    try:
        async for msg in context.bot.get_chat_history(GROUP_ID):
            try:
                await context.bot.delete_message(chat_id=GROUP_ID, message_id=msg.message_id)
            except:
                continue
    except Exception as e:
        logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —á–∞—Ç–∞: {e}")
    finally:
        report_users_today.clear()

# –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
scheduler = AsyncIOScheduler()
scheduler.add_job(daily_clear_chat, 'cron', hour=0, minute=0, args=[telegram_app])

# FastAPI
@app_fastapi.get("/")
async def healthcheck():
    return {"status": "ok"}

@app_fastapi.post("/webhook")
async def telegram_webhook(request: Request):
    update_dict = await request.json()
    update = Update.de_json(update_dict, telegram_app.bot)
    await telegram_app.process_update(update)
    return {"status": "ok"}

@app_fastapi.on_event("startup")
async def on_startup():
    scheduler.start()
    logger.info("üïõ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á –∑–∞–ø—É—â–µ–Ω.")
    await telegram_app.initialize()
    await telegram_app.bot.set_webhook(url=f"{WEBHOOK_URL}/webhook")

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤
telegram_app.add_handler(CommandHandler("start", start))
telegram_app.add_handler(CommandHandler("last", last_report))
telegram_app.add_handler(MessageHandler(filters.VIDEO | filters.Document.VIDEO, handle_video))
telegram_app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
telegram_app.add_handler(MessageHandler(filters.PHOTO, handle_photo))

# –ó–∞–ø—É—Å–∫
if __name__ == "__main__":
    import uvicorn
    port = int(os.environ.get("PORT", 10000))
    uvicorn.run(app_fastapi, host="0.0.0.0", port=port)
