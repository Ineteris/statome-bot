from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from datetime import datetime
from fastapi.responses import Response
from fastapi import FastAPI, Request
from telegram.constants import ParseMode
import asyncio
import logging
import os

logging.basicConfig(level=logging.INFO)

BOT_TOKEN = os.environ.get("BOT_TOKEN")
CHANNEL_ID = os.environ.get("CHANNEL_ID")
GROUP_ID = os.environ.get("GROUP_ID")
WEBHOOK_URL = os.environ.get("WEBHOOK_URL")

USER_MAP = {
    "@CarlosPastorSempere": "00001-PASTOR SEMPERE, CARLOS",
    "@DanAkcerman": "00003-MONIN, DANILL",
    "@Oleg_dokukin": "00004-DOKUKIN, OLEH",
    "@OlegDokukin": "00004-DOKUKIN, OLEH",
    "@ViktorTiko": "A00008-VIKTOR TIKHONYCHEV"
}

last_message_ids = {}         # user_id: message_id
report_users_today = {}       # user_id: (name, time)

app_fastapi = FastAPI()
telegram_app = ApplicationBuilder().token(BOT_TOKEN).build()

# HEAD-–∑–∞–ø—Ä–æ—Å –¥–ª—è Render –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
@app_fastapi.head("/webhook")
async def webhook_head():
    return Response(status_code=200)

# Healthcheck
@app_fastapi.get("/")
async def healthcheck():
    return {"status": "ok"}

@app_fastapi.post("/webhook")
async def telegram_webhook(request: Request):
    update_dict = await request.json()
    update = Update.de_json(update_dict, telegram_app.bot)
    await telegram_app.process_update(update)
    return {"status": "ok"}

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_chat.type != 'private':
        return
    lang = update.effective_user.language_code
    text = (
        "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ –≤–∏–¥–µ–æ, —Ñ–æ—Ç–æ –∏–ª–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á—ë—Ç –ø–æ —Ä–∞–±–æ—Ç–µ.\n–ö–æ–º–∞–Ω–¥—ã:\n‚Ä¢ /last ‚Äî –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç—á—ë—Ç"
        if lang != 'es' else
        "Hola, env√≠ame tu video, foto o informe escrito de trabajo.\nComandos:\n‚Ä¢ /last ‚Äî √∫ltimo informe"
    )
    await update.message.reply_text(text)

# –ö–æ–º–∞–Ω–¥–∞ /last
async def last_report(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    msg_id = last_message_ids.get(user_id)
    if not msg_id:
        await update.message.reply_text("‚ùå –í–∞—à –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç—á—ë—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    try:
        await context.bot.copy_message(
            chat_id=user_id,
            from_chat_id=CHANNEL_ID,
            message_id=msg_id
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–µ –æ—Ç—á—ë—Ç–∞: {e}")
        await update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç—á—ë—Ç.")

# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ–¥–∏–∞
async def handle_media(update: Update, context: ContextTypes.DEFAULT_TYPE, media_type: str):
    user = update.effective_user
    username = f"@{user.username}" if user.username else None
    custom_name = USER_MAP.get(username, user.full_name)
    caption_text = update.message.caption or update.message.text or ""
    # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–∏–º–≤–æ–ª—ã Markdown
    safe_caption = caption_text.replace("(", "\\(").replace(")", "\\)")
    final_caption = f"*{custom_name}* ({username or '-'})\n{safe_caption}"

    try:
        if media_type == "video":
            video = update.message.video or update.message.document
            sent = await context.bot.send_video(chat_id=CHANNEL_ID, video=video.file_id, caption=final_caption, parse_mode=ParseMode.MARKDOWN_V2)

        elif media_type == "photo":
            photo = update.message.photo[-1]
            sent = await context.bot.send_photo(chat_id=CHANNEL_ID, photo=photo.file_id, caption=final_caption, parse_mode=ParseMode.MARKDOWN_V2)

        elif media_type == "text":
            sent = await context.bot.send_message(chat_id=CHANNEL_ID, text=final_caption, parse_mode=ParseMode.MARKDOWN_V2)

        if sent:
            user_id = update.effective_user.id
            last_message_ids[user_id] = sent.message_id
            report_users_today[user_id] = (custom_name, datetime.now().strftime("%H:%M"))
            await update.message.reply_text("‚úÖ –û—Ç—á—ë—Ç –ø–æ–ª—É—á–µ–Ω. –°–ø–∞—Å–∏–±–æ!")

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –û—á–∏—Å—Ç–∫–∞ —á–∞—Ç–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ
async def daily_clear_chat(context: ContextTypes.DEFAULT_TYPE):
    logging.info("üßπ –ó–∞–ø—É—Å–∫ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≥—Ä—É–ø–ø—ã")
    try:
        async for msg in context.bot.get_chat_history(GROUP_ID):
            try:
                await context.bot.delete_message(chat_id=GROUP_ID, message_id=msg.message_id)
            except:
                continue
    except Exception as e:
        logging.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —á–∞—Ç–∞: {e}")
    finally:
        report_users_today.clear()

# –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
scheduler = AsyncIOScheduler()
scheduler.add_job(daily_clear_chat, 'cron', hour=0, minute=0, args=[telegram_app])

@telegram_app.on_startup
async def on_startup(application):
    scheduler.start()
    logging.info("üïõ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á –∑–∞–ø—É—â–µ–Ω.")
    await telegram_app.initialize()
    await telegram_app.bot.set_webhook(url=f"{WEBHOOK_URL}/webhook")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
telegram_app.add_handler(CommandHandler("start", start))
telegram_app.add_handler(CommandHandler("last", last_report))
telegram_app.add_handler(MessageHandler(filters.VIDEO | filters.Document.VIDEO, lambda u, c: handle_media(u, c, "video")))
telegram_app.add_handler(MessageHandler(filters.PHOTO, lambda u, c: handle_media(u, c, "photo")))
telegram_app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, lambda u, c: handle_media(u, c, "text")))

# –ó–∞–ø—É—Å–∫
if __name__ == "__main__":
    import uvicorn
    port = int(os.environ.get("PORT", 10000))
    uvicorn.run(app_fastapi, host="0.0.0.0", port=port)
